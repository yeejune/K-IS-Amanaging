# KISA 침해사고 분석 절차 기반 Windows 사고 대응 데이터 수집 스크립트
# 이 스크립트는 Windows 시스템에서 휘발성 데이터를 포함한 주요 증거를 수집합니다.
# 수집된 데이터는 바탕화면의 고유 폴더에 정리되어 저장되며, 인터넷 연결을 사용하지 않습니다.
# 보고서의 지침에 따라 PowerShell cmdlet 대신 주로 명령줄 도구를 사용합니다.

# 출력 디렉토리 설정: 타임스탬프를 포함하여 고유한 폴더 생성
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$computerName = $env:COMPUTERNAME
$outputBaseDir = Join-Path ([Environment]::GetFolderPath("Desktop")) "IR_Collection" # 바탕화면에 폴더 생성
$outputDir = Join-Path $outputBaseDir "$computerName_$timestamp"

Write-Host "--- Windows 사고 대응 데이터 수집 시작 ---"
Write-Host "수집된 데이터는 다음 폴더에 저장됩니다: $outputDir"

# 출력 디렉토리 생성 (이미 존재하면 덮어쓰지 않고 에러 방지)
try {
    New-Item -ItemType Directory -Path $outputDir -Force | Out-Null
    Write-Host "디렉토리 '$outputDir' 생성 완료."
} catch {
    Write-Warning "디렉토리 생성 중 오류 발생: $($_.Exception.Message)"
    exit
}

# -----------------------------------------------------------------------------
# KISA 보고서 3장 1절. 윈도우 사고 분석
# 가. 시스템 시간 확인 (date /time /T, systeminfo 사용)
# -----------------------------------------------------------------------------
Write-Host "`n--- 1. 시스템 기본 정보 수집 중 ---"
Write-Host "  [수집 항목]: 현재 시스템의 날짜, 시간, OS 정보 및 설치된 보안 업데이트 목록"
Write-Host "  [수집 이유]: 시스템의 현재 상태를 파악하고, 공격자가 시간 정보를 조작했는지, 시스템에 적용된 보안 패치 상태를 확인하여 초기 침투 경로를 추정하는 데 활용됩니다."

# 1.1 시스템 날짜 및 시간
Write-Host "  - 시스템 날짜 및 시간 정보 수집 (date /T, time /T)..."
cmd.exe /c "date /T" | Out-File -FilePath (Join-Path $outputDir "System_Date.txt")
cmd.exe /c "time /T" | Out-File -FilePath (Join-Path $outputDir "System_Time.txt")

# 1.2 시스템 정보 및 HotFix (systeminfo 사용)
Write-Host "  - OS, 시스템 구성 및 HotFix 정보 수집 (systeminfo)..."
cmd.exe /c "systeminfo" | Out-File -FilePath (Join-Path $outputDir "System_Info.txt")

# -----------------------------------------------------------------------------
# KISA 보고서 3장 1절. 윈도우 사고 분석
# 다. 프로세스 정보 확인 (tasklist /v 대체)
# 라. 네트워크 정보 확인 (netstat -an, ipconfig /all 대체)
# -----------------------------------------------------------------------------
Write-Host "`n--- 2. 프로세스 및 네트워크 정보 수집 중 ---"
Write-Host "  [수집 항목]: 실행 중인 프로세스 목록(명령줄 포함), 네트워크 연결 상태(TCP/UDP), 네트워크 인터페이스 설정, Promiscuous 모드 활성 여부"
Write-Host "  [수집 이유]: 악성 프로세스가 실행 중인지, 비정상적인 네트워크 연결이나 백도어 포트가 열려 있는지 확인하고, 스니핑 활동 여부를 파악하는 데 필수적인 휘발성 정보입니다."
Write-Host "  (참고: 'listdlls'와 'handle'의 세부 기능은 명령줄 도구만으로는 완전히 대체하기 어렵습니다. 외부 전문 도구 분석이 필요합니다.)"

# 2.1 실행 중인 프로세스 정보 (tasklist /v 사용)
Write-Host "  - 실행 중인 프로세스 정보 수집 (tasklist /v)..."
cmd.exe /c "tasklist /v" | Out-File -FilePath (Join-Path $outputDir "Processes_TaskList_V.txt")

# 2.2 네트워크 연결 정보 (netstat -an 사용)
Write-Host "  - 네트워크 연결 정보 수집 (netstat -an)..."
cmd.exe /c "netstat -an" | Out-File -FilePath (Join-Path $outputDir "Network_Netstat_an.txt")

# 2.3 네트워크 인터페이스 정보 (ipconfig /all 사용)
Write-Host "  - 네트워크 인터페이스 정보 수집 (ipconfig /all)..."
cmd.exe /c "ipconfig /all" | Out-File -FilePath (Join-Path $outputDir "Network_IPConfig_All.txt")

# Promiscuous 모드 확인 (WMI를 통한 간접 확인)
Write-Host "  - 네트워크 어댑터 Promiscuous 모드 활성 여부 확인 (WMI)..."
Get-WmiObject -Class Win32_NetworkAdapterConfiguration | Select-Object Description, MACAddress, IPAddress, WINSPrimaryServer, WINSSecondaryServer, DNSHostName, ServiceName, @{Name="PromiscuousModeEnabled"; Expression={if($_.GetExtensionProperty("PromiscuousModeEnabled")){"Yes"}else{"No"}}} | Export-Csv -Path (Join-Path $outputDir "Network_AdapterConfig_WMI.csv") -NoTypeInformation

# -----------------------------------------------------------------------------
# KISA 보고서 3장 1절. 윈도우 사고 분석
# 마. 사용자/그룹 확인 (net user, net localgroup 사용)
# 바. 공유, 로그인 정보 확인 (net share, net session 대체)
# -----------------------------------------------------------------------------
Write-Host "`n--- 3. 사용자 및 그룹, 공유 정보 수집 중 ---"
Write-Host "  [수집 항목]: 로컬 사용자 계정, 로컬 그룹 목록, 시스템 공유 폴더 정보"
Write-Host "  [수집 이유]: 공격자에 의해 생성된 비인가 계정이나 권한 상승에 사용된 그룹 변경 여부를 확인하고, 비정상적인 공유 폴더를 탐지하여 침투 경로를 추적합니다."
Write-Host "  (참고: 'ntlast'와 같은 상세 로그인 기록은 이벤트 로그 분석이 더 효과적입니다.)"

# 3.1 로컬 사용자 정보 (net user 사용)
Write-Host "  - 로컬 사용자 정보 수집 (net user)..."
cmd.exe /c "net user" | Out-File -FilePath (Join-Path $outputDir "Local_Users.txt")

# 3.2 로컬 그룹 정보 (net localgroup 사용)
Write-Host "  - 로컬 그룹 정보 수집 (net localgroup)..."
cmd.exe /c "net localgroup" | Out-File -FilePath (Join-Path $outputDir "Local_Groups.txt")

# 각 로컬 그룹의 멤버 정보 수집 (추가적인 net localgroup 명령어 사용)
Write-Host "  - 각 로컬 그룹의 멤버 정보 수집 (net localgroup <groupname>)..."
try {
    # 'net localgroup' 결과 파싱하여 그룹 이름만 추출
    $groups = (cmd.exe /c "net localgroup") | Select-String -Pattern "^[\w\s]+\s*$" | ForEach-Object { $_.ToString().Trim() }
    # 'Administrators' 그룹과 같은 흔한 그룹은 일반적으로 멤버가 많지 않으므로, 자세히 수집
    # 실제로는 모든 그룹을 반복하는 것이 더 정확
    $detailedGroupInfo = @()
    foreach ($groupName in $groups) {
        if ($groupName -and $groupName -notmatch "----------------" -and $groupName -notmatch "명령을 잘 실행했습니다.") {
            try {
                $groupMembers = (cmd.exe /c "net localgroup `"$groupName`"") | Out-String
                $detailedGroupInfo += "$groupName`n$groupMembers`n"
            } catch {
                Write-Warning "그룹 '$groupName' 멤버 수집 중 오류: $($_.Exception.Message)"
            }
        }
    }
    $detailedGroupInfo | Out-File -FilePath (Join-Path $outputDir "Local_Groups_DetailedMembers.txt")
} catch {
    Write-Warning "로컬 그룹 멤버 정보 수집 중 상위 오류: $($_.Exception.Message)"
}


# 3.3 공유 폴더 정보 (net share 사용)
Write-Host "  - 공유 폴더 정보 수집 (net share)..."
cmd.exe /c "net share" | Out-File -FilePath (Join-Path $outputDir "Shared_Folders.txt")

# 현재 활성 세션 (net session 대체) - 이 정보는 보안상 제한될 수 있어 기본적으로 생략
# Write-Host "  - 활성 SMB 세션 정보 수집 (net session, 권한 문제로 생략될 수 있음)..."
# cmd.exe /c "net session" | Out-File -FilePath (Join-Path $outputDir "SMB_Sessions.txt")

# -----------------------------------------------------------------------------
# KISA 보고서 3장 1절. 윈도우 사고 분석
# 사. 자동화 도구 (WFT, Biatchux, IRCR 대신 직접 정보 수집)
# 레지스트리 분석 (Autoruns, Autostart Viewer 대체)
# 자동실행 점검 (서비스, 스케쥴된 작업, Winlogon Notification DLL, IE BHO DLL)
# -----------------------------------------------------------------------------
Write-Host "`n--- 4. 자동 시작 프로그램 및 서비스 정보 수집 중 ---"
Write-Host "  [수집 항목]: 윈도우 시작 시 자동 실행되는 레지스트리 항목, 서비스, 스케줄된 작업, Winlogon/IE 관련 DLL"
Write-Host "  [수집 이유]: 악성코드가 시스템 재부팅 후에도 자동으로 실행되도록 등록하는 흔적(지속성 메커니즘)을 찾아내어 악성코드의 존재 여부를 확인합니다."

# 4.1 레지스트리 Run 키 (reg query 사용)
Write-Host "  - 레지스트리 Run 키 정보 수집 (reg query)..."
$runKeysCmd = @(
    "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run",
    "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce",
    "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run",
    "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce"
)
foreach ($key in $runKeysCmd) {
    try {
        cmd.exe /c "reg query `"$key`" /s" | Out-File -FilePath (Join-Path $outputDir "Autostart_RunKey_$(($key -replace ':', '') -replace '\\', '_').txt")
    } catch {
        Write-Warning "레지스트리 키 '$key' 수집 중 오류: $($_.Exception.Message)"
    }
}

# 4.2 서비스 정보 (sc query 사용)
Write-Host "  - 서비스 정보 수집 (sc query type= service state= all)..."
cmd.exe /c "sc query type= service state= all" | Out-File -FilePath (Join-Path $outputDir "Autostart_Services_SC.txt")

# 4.3 스케줄된 작업 (schtasks /query 사용)
Write-Host "  - 스케줄된 작업 정보 수집 (schtasks /query /fo list /v)..."
cmd.exe /c "schtasks /query /fo list /v" | Out-File -FilePath (Join-Path $outputDir "Autostart_ScheduledTasks_SCHTASKS.txt")

# 4.4 Winlogon Notification DLL (reg query 사용)
Write-Host "  - Winlogon Notification DLL 정보 수집 (reg query)..."
try {
    cmd.exe /c "reg query `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify` /s" | Out-File -FilePath (Join-Path $outputDir "Autostart_WinlogonNotify_REG.txt")
} catch {
    Write-Warning "Winlogon Notify DLL 수집 중 오류: $($_.Exception.Message)"
}

# 4.5 Internet Explorer BHO (Browser Helper Objects) 및 기타 IE 관련 확장 (reg query 사용)
Write-Host "  - Internet Explorer BHO 및 확장 정보 수집 (reg query)..."
try {
    cmd.exe /c "reg query `HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Browser Helper Objects` /s" | Out-File -FilePath (Join-Path $outputDir "Autostart_IE_BHOs_REG.txt")
} catch {
    Write-Warning "IE BHO 수집 중 오류: $($_.Exception.Message)"
}

# -----------------------------------------------------------------------------
# KISA 보고서 3장 1절. 윈도우 사고 분석
# 다. 이벤트 로그 분석
# -----------------------------------------------------------------------------
Write-Host "`n--- 5. 이벤트 로그 수집 중 ---"
Write-Host "  [수집 항목]: 최근 7일간의 보안, 시스템, 애플리케이션 이벤트 로그 (Wevtutil 사용)"
Write-Host "  [수집 이유]: 시스템에 발생한 비정상적인 활동(로그온 실패, 계정 잠김, 서비스 오류 등)의 흔적을 파악하고 공격자의 행위를 시간순으로 추적합니다."

# 최근 7일간의 보안, 시스템, 애플리케이션 로그 수집 (용량 문제 고려하여 기간 조정)
# Wevtutil은 Get-WinEvent처럼 시간 필터링이 정교하지 않으므로, 최근 일정 개수만 추출
$logNames = "Security", "System", "Application"
$eventCount = 1000 # 각 로그별로 최근 1000개 이벤트만 추출

foreach ($log in $logNames) {
    try {
        Write-Host "  - '$log' 이벤트 로그 수집 (wevtutil qe $log /c:$eventCount)..."
        cmd.exe /c "wevtutil qe $log /f:text /c:$eventCount" | Out-File -FilePath (Join-Path $outputDir "EventLog_${log}_Recent.txt")
    } catch {
        Write-Warning "이벤트 로그 '$log' 수집 중 오류: $($_.Exception.Message)"
    }
}

# -----------------------------------------------------------------------------
# KISA 보고서 3장 1절. 윈도우 사고 분석
# 라. MAC time 분석 (forfiles 사용)
# 마. 침입방법 분석 (로그 분석에 필요한 데이터 수집)
# 바. 인터넷 임시파일 분석 (경로 기록)
# -----------------------------------------------------------------------------
Write-Host "`n--- 6. 인터넷 임시 파일 및 MAC Time 관련 정보 수집 중 ---"
Write-Host "  [수집 항목]: 임시 인터넷 파일이 저장되는 경로, 최근 3일 이내 수정된 파일 목록"
Write-Host "  [수집 이유]: 공격자가 방문한 웹사이트 흔적을 확인하고, 악성코드 유포 및 실행 관련 파일의 생성/수정/접근 시간을 분석하여 사고의 타임라인을 구성하는 데 활용됩니다."

# 6.1 임시 인터넷 파일 경로 기록
Write-Host "  - 임시 인터넷 파일 경로 기록..."
$tempInternetFilesPaths = @(
    "$env:SystemRoot\Downloaded Program Files",
    "$env:USERPROFILE\Local Settings\Temporary Internet Files", # Windows XP/2003 (보고서 명시)
    "$env:USERPROFILE\Local Settings\History",                 # Windows XP/2003 (보고서 명시)
    "$env:USERPROFILE\Local Settings\COOKIES"                 # Windows XP/2003 (보고서 명시)
)
$tempInternetFilesPaths | Out-File -FilePath (Join-Path $outputDir "Internet_Temp_Paths.txt")

# 6.2 최근 변경된 파일 목록 (MAC time 분석의 일부 - forfiles 사용)
# 최근 3일 동안 수정된 파일 목록 (C: 드라이브만, 대용량 파일 시스템은 시간 소요)
Write-Host "  - 최근 3일 이내 수정된 파일 목록 수집 중 (C: 드라이브, forfiles 사용, 시간이 오래 걸릴 수 있음)..."
try {
    # forfiles는 CMD 명령어로, LastWriteTime 기반으로만 필터링 가능
    # /S: 하위 디렉토리 포함, /D -3: 3일 이내 수정된 파일
    # /C "cmd /c echo @path @fdate @ftime": 파일 경로, 수정 날짜, 수정 시간 출력
    cmd.exe /c "forfiles /P C:\ /S /D -3 /C \"cmd /c echo @path @fdate @ftime\"" | Out-File -FilePath (Join-Path $outputDir "Recent_Modified_Files_C_Drive_ForFiles.txt")
} catch {
    Write-Warning "최근 변경 파일 수집 중 오류: $($_.Exception.Message)"
}

Write-Host "`n--- 스크립트 실행 완료 ---"
Write-Host "모든 수집된 데이터는 바탕화면의 '$($outputDir)' 폴더에 성공적으로 저장되었습니다."